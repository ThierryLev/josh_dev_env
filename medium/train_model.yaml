name: Train and save model
inputs:
- {name: file_bucket, type: String}
- {name: service_type, type: String}
- {name: score_date_dash, type: String}
- {name: score_date_val_dash, type: String}
- {name: project_id, type: String}
- {name: dataset_id, type: String}
outputs:
- {name: metrics, type: Metrics}
- {name: metricsc, type: ClassificationMetrics}
implementation:
  container:
    image: northamerica-northeast1-docker.pkg.dev/cio-workbench-image-np-0ddefe/wb-platform/pipelines/kubeflow-pycaret:latest
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.11' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef train_and_save_model(\n            file_bucket: str,\n   \
      \         service_type: str,\n            score_date_dash: str,\n          \
      \  score_date_val_dash: str,\n            project_id: str,\n            dataset_id:\
      \ str,\n            metrics: Output[Metrics],\n            metricsc: Output[ClassificationMetrics]\n\
      \    ):\n    # Import Libraries\n    import pandas as pd\n    import numpy as\
      \ np\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    from\
      \ sklearn import metrics\n    from sklearn.datasets import load_breast_cancer\n\
      \    from sklearn.model_selection import train_test_split\n    import xgboost\
      \ as xgb\n    from sklearn.metrics import roc_auc_score\n\n    #import features\
      \ into X and target into y for training\n    X, y = load_breast_cancer(return_X_y\
      \ = True, as_frame = True) \n\n    # Create the training and test sets\n   \
      \ X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)\n\
      \n    # Instantiate the XGB Classifier: xgb_model\n    xgb_model = xgb.XGBClassifier(\n\
      \        learning_rate=0.01,\n        n_estimators=100,\n        max_depth=8,\n\
      \        min_child_weight=1,\n        gamma=0,\n        subsample=0.8,\n   \
      \     colsample_bytree=0.8,\n        objective='binary:logistic',\n        nthread=4,\n\
      \        scale_pos_weight=1\n        # seed=27\n    )\n\n    # Fit the classifier\
      \ to the training set\n    xgb_model.fit(X_train, y_train)\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - train_and_save_model
