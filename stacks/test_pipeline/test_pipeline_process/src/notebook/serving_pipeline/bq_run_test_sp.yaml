name: Bq run test sp
inputs:
- {name: score_date_dash, type: String}
- {name: project_id, type: String}
- {name: dataset_id, type: String}
- {name: region, type: String}
- {name: token, type: String}
outputs:
- {name: num_records, type: Integer}
implementation:
  container:
    image: northamerica-northeast1-docker.pkg.dev/cio-workbench-image-np-0ddefe/bi-platform/bi-aaaie/images/kfp-pycaret-slim:latest
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.18' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef bq_run_test_sp(score_date_dash: str,\n                  project_id:\
      \ str,\n                  dataset_id: str,\n                  region: str, \n\
      \                  token: str) -> NamedTuple(\"output\", [(\"num_records\",\
      \ int)]):\n\n    from datetime import datetime\n    from google.cloud import\
      \ bigquery\n    import logging \n\n    #### For wb\n    import google.oauth2.credentials\n\
      \    CREDENTIALS = google.oauth2.credentials.Credentials(token)\n\n    client\
      \ = bigquery.Client(project=project_id, credentials=CREDENTIALS)\n    job_config\
      \ = bigquery.QueryJobConfig()\n\n#     #### For prod \n#     client = bigquery.Client(project=project_id)\n\
      #     job_config = bigquery.QueryJobConfig()\n\n    # Execute stored procedure\
      \ in BQ\n    query =\\\n        f'''\n            DECLARE score_date DATE DEFAULT\
      \ \"{score_date_dash}\";\n\n            -- Change dataset / sp name to the version\
      \ in the bi_layer\n            CALL {dataset_id}.bq_sp_wls_training_dataset(score_date);\n\
      \n            SELECT\n                *\n            FROM {dataset_id}.INFORMATION_SCHEMA.PARTITIONS\n\
      \            WHERE table_name='bq_wls_training_dataset'\n\n        '''\n\n \
      \   # Contain query result into df and log\n    df = client.query(query, job_config=job_config).to_dataframe()\n\
      \    logging.info(df.to_string())\n\n    logging.info(f\"Loaded {df.total_rows[0]}\
      \ rows into \\\n             {df.table_catalog[0]}.{df.table_schema[0]}.{df.table_name[0]}\
      \ on \\\n             {datetime.strftime((df.last_modified_time[0]), '%Y-%m-%d\
      \ %H:%M:%S') } !\")\n\n    # Report number of rows added\n    query =\\\n  \
      \      f'''\n           SELECT *\n           FROM {dataset_id}.bq_wls_training_dataset\n\
      \           WHERE part_dt = \"{score_date_dash}\" \n        '''\n\n    df =\
      \ client.query(query, job_config=job_config).to_dataframe()\n\n    num_records\
      \ = df.shape[0]\n\n    return (num_records,)\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - bq_run_test_sp
