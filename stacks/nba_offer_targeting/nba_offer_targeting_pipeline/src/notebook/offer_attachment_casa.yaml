name: Offer attachment casa
inputs:
- {name: irpc_base_csv, type: String}
- {name: irpc_offer_plans_csv, type: String}
- {name: irpc_offer_prices_csv, type: String}
- {name: channel, type: String}
- {name: save_data_path, type: String}
- {name: backup_save_data_path, type: String}
implementation:
  container:
    image: northamerica-northeast1-docker.pkg.dev/cio-workbench-image-np-0ddefe/wb-platform/pipelines/kubeflow-pycaret:latest
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.18' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef offer_attachment_casa(irpc_base_csv: str\n               \
      \    , irpc_offer_plans_csv: str \n                   , irpc_offer_prices_csv:\
      \ str\n                   , channel: str\n                   , save_data_path:\
      \ str\n                   , backup_save_data_path: str\n                  ):\
      \ \n\n    import pandas as pd \n    import numpy as np \n\n    def convert_df_to_list_dict(df,\
      \ \n                                channel: str = 'digital' # digital or casa\n\
      \                                ): \n\n        import re\n        import logging\
      \ \n        from datetime import datetime\n\n        # Change dataset / table\
      \ + sp table name to version in bi-layer\n        if channel == 'digital': \n\
      \            df = df\n        elif channel == 'casa': \n            df = df.iloc[:4]\n\
      \        else: \n            print(\"a parameter 'channel' can only be either\
      \ 'digital' or 'casa'\")\n\n        # create list_hsia_speed = [250, 500, 1000,\
      \ 1500, 3000]\n        list_hsia_speed = df.columns[3:]\n\n        list_hsia_speed\
      \ = [int(re.search(r'\\d+', speed).group()) for speed in list_hsia_speed]\n\n\
      \        # create dictionary of hsia_prices \n        # Convert DataFrame to\
      \ a dictionary\n        dict_hsia_details = df.to_dict(orient='list')\n\n  \
      \      return list_hsia_speed, dict_hsia_details\n\n    def find_casa_irpc_offers(list_hsia_speed:\
      \ str, # list_hsia_speed = [250, 500, 1000, 1500, 3000] as of Feb 2024\n   \
      \                          dict_hsia_plans_details: str, # e.g. internet_250:\
      \ ['1P:Regular (Internet 250)', '1P:Tier 0 (Internet 250)', '1P:Tier 1 (Internet\
      \ 250)']\n                             dict_hsia_prices_details: str, # e.g.\
      \ internet_250: [105, 100, 95, 85, 75]\n                             row, \n\
      \                             offer_num: int\n                             ):\n\
      \n        import pandas as pd\n        import numpy as np \n        from datetime\
      \ import datetime\n\n        cust_id, ban, lpds_id = row['cust_id'], row['bacct_num'],\
      \ row['lpds_id']\n\n        if offer_num == 1: \n            provisioned_hs_speed_numeric,\
      \ hs_max_speed_numeric, total_charges = row['provisioned_hs_speed_numeric'],\
      \ row['hs_max_speed_numeric'], row['total_charges']\n        elif offer_num\
      \ == 2: \n            provisioned_hs_speed_numeric, hs_max_speed_numeric, total_charges\
      \ = row['hsia_speed1'], row['hs_max_speed_numeric1'], row['hsia_price1']\n \
      \       elif offer_num == 3: \n            provisioned_hs_speed_numeric, hs_max_speed_numeric,\
      \ total_charges = row['provisioned_hs_speed_numeric'], row['hs_max_speed_numeric'],\
      \ row['total_charges']\n\n        if provisioned_hs_speed_numeric is None and\
      \ hs_max_speed_numeric is None and total_charges is None: \n            return\
      \ [None, None, None, None] \n\n        ### 1. Find the smallest number in hsia_speed\
      \ that is greater than provisioned_hs_speed_numeric\n        # exception: if\
      \ the current hsia_speed >= 150 AND hsia_speed < 500, then change the value\
      \ to 499 so that it bypasses 250 \n        ## Internet 150 customers should\
      \ not be shown Internet 250 tier, as they are upsped in the backend to speeds\
      \ of 300mbps ##\n        if provisioned_hs_speed_numeric >= 150 and provisioned_hs_speed_numeric\
      \ < 500: \n            provisioned_hs_speed_numeric = 499\n\n        # if offer_3_ind\
      \ == True: \n        # find an L4L offer - lowest speed tier possible at equal\
      \ or higher than their current pay\n        # Lower speed tier than offer 1\n\
      \        # Can also be in-market rack rate\n        # If customer is in-term\
      \ (month 1 to month 21), do not promote a like-for-like speed or like-for-like\
      \ price\n\n        if row['rpp_hsia_end_dt'].notnull(): \n            rpp_hsia_end_dt\
      \ = pd.to_datetime(row['rpp_hsia_end_dt'])\n            today_dt = datetime.today().date()\n\
      \n        if offer_num == 3 and rpp_hsia_end_dt is not None and (rpp_hsia_end_dt\
      \ - today_dt) <= 90:\n\n            try: \n\n                hsia_speed = np.min([spd\
      \ for spd in list_hsia_speed if spd == provisioned_hs_speed_numeric and spd\
      \ <= hs_max_speed_numeric and not pd.isna(spd)])\n\n                list_hsia_price\
      \ = dict_hsia_prices_details[f'internet_{hsia_speed}']\n\n                if\
      \ len([price for price in list_hsia_price if price >= total_charges]) > 0:\n\
      \                    hsia_price = np.min([price for price in list_hsia_price\
      \ if price > total_charges])\n\n                if hsia_price in list_hsia_price:\n\
      \                    plan_idx = list_hsia_price.index(hsia_price)\n\n      \
      \          hsia_plan_name = dict_hsia_plans_details[f'internet_{hsia_speed}'][plan_idx]\n\
      \n                return [hsia_speed, hs_max_speed_numeric, hsia_price, hsia_plan_name]\n\
      \n            except IndexError:\n                provisioned_hs_speed_numeric,\
      \ hs_max_speed_numeric, total_charges = row['hsia_speed2'], row['hs_max_speed_numeric2'],\
      \ row['hsia_price2']\n\n            except ValueError: \n                provisioned_hs_speed_numeric,\
      \ hs_max_speed_numeric, total_charges = row['hsia_speed2'], row['hs_max_speed_numeric2'],\
      \ row['hsia_price2']\n\n            except UnboundLocalError: \n           \
      \     provisioned_hs_speed_numeric, hs_max_speed_numeric, total_charges = row['hsia_speed2'],\
      \ row['hs_max_speed_numeric2'], row['hsia_price2']\n\n        # store minimum\
      \ hsia speed offer available greater than the current speed in 'hsia_speed'\n\
      \        # AND \n        # minimum speed offer available where the highest offer\
      \ price in that speed is greater than or equal to 'total_charges'\n\n      \
      \  # requirements:\n            # - list_hsia_speed\n            # - np.max([spd\
      \ for spd in dict_hsia_prices_details[f'internet_{hsia_speed}'] if not pd.isna(spd)])\
      \ --> max offer price in the internet speed\n            # - compare max offer\
      \ price vs total_charges \n            # - since internet_250 does not have\
      \ offer tier equal to or greater than $125, we need to move on to the next speed,\
      \ which is 500\n            # - since internet_500 does not have offer tier\
      \ equal to or greater than $125, we need to again move on to the next speed,\
      \ which is 1000\n            # - internet_1000 has an offer tier equal to or\
      \ greater than $125, so hsia_speed = 1000\n\n        try: \n\n            hsia_speed\
      \ = np.min([spd for spd in list_hsia_speed if spd > provisioned_hs_speed_numeric\
      \ and spd <= hs_max_speed_numeric and not pd.isna(spd)])\n            max_offer_price\
      \ = np.max([spd for spd in dict_hsia_prices_details[f'internet_{hsia_speed}']\
      \ if not pd.isna(spd)])\n\n            while max_offer_price <= total_charges:\
      \ \n                hsia_speed_idx = list_hsia_speed.index(hsia_speed)\n   \
      \             hsia_speed = list_hsia_speed[hsia_speed_idx + 1]\n           \
      \     max_offer_price = np.max([spd for spd in dict_hsia_prices_details[f'internet_{hsia_speed}']\
      \ if not pd.isna(spd)])\n\n        except IndexError:\n            pass\n\n\
      \        except ValueError: \n            return [None, None, None, None]\n\n\
      \        ### 2. Find the smallest number in dict_hsia_prices_details[hsia_speed]\
      \ that is greater than total_charges --> 75\n\n        list_hsia_price = dict_hsia_prices_details[f'internet_{hsia_speed}']\n\
      \n        if len([price for price in list_hsia_price if price >= total_charges])\
      \ > 0: \n\n            try: \n                hsia_price = np.min([price for\
      \ price in list_hsia_price if price > total_charges])\n\n                # scenario\
      \ when the same price DOES EXIST in the next speed offer (e.g. if internet_500,\
      \ check internet_1000 for $95 offer ==> YES): \n                hsia_speed_idx\
      \ = list_hsia_speed.index(hsia_speed)\n                next_hsia_speed = list_hsia_speed[hsia_speed_idx\
      \ + 1]\n\n                if hsia_price in dict_hsia_prices_details[f'internet_{next_hsia_speed}']\
      \ and hsia_speed == provisioned_hs_speed_numeric: \n                    list_hsia_price\
      \ = dict_hsia_prices_details[f'internet_{next_hsia_speed}']\n              \
      \      hsia_speed = next_hsia_speed \n\n            except IndexError: \n  \
      \              print(f\"The hsia_speed {hsia_speed} is the fastest internet\
      \ speed available.\")\n\n            except UnboundLocalError: \n          \
      \      print(f\"The hsia_speed {hsia_speed} is the fastest internet speed available.\"\
      )\n\n            except ValueError: \n                return [None, None, None,\
      \ None]\n\n            # scenario when the same price DOES NOT EXIST in the\
      \ next speed offer (e.g. if internet_1000, check internet_1500 for $95 offer\
      \ ==> NO): \n\n            if hsia_price in list_hsia_price:\n             \
      \   plan_idx = list_hsia_price.index(hsia_price)    \n\n            ### 4. Call\
      \ the plan name by hsia_plans[provisioned_hs_speed_numeric]==250][plan_idx==4]\
      \ --> \"1P: Tier 3 (Internet 250)\"\n\n            hsia_plan_name = dict_hsia_plans_details[f'internet_{hsia_speed}'][plan_idx]\n\
      \n            return [hsia_speed, hs_max_speed_numeric, hsia_price, hsia_plan_name]\
      \ \n\n        else: \n\n            return [None, None, None, None]\n\n    #\
      \ read the above 3 csv's (bq_irpc_digital_1p_base.csv, irpc_offer_1p_plans.csv,\
      \ irpc_offer_prices.csv\n    # read bq_irpc_digital_1p_base and store in df\n\
      \    df_base = pd.read_csv(irpc_base_csv)\n    df_plans = pd.read_csv(irpc_offer_plans_csv)\n\
      \    df_prices = pd.read_csv(irpc_offer_prices_csv)\n\n    # convert irpc_offer_1p_plans\
      \ and irpc_offer_prices to lists and dictionaries\n    # - list_hsia_speed\n\
      \    # - dict_hsia_details\n    list_hsia_speed, dict_hsia_plans_details = convert_df_to_list_dict(df_plans,\
      \ channel)\n    list_hsia_speed, dict_hsia_prices_details = convert_df_to_list_dict(df_prices,\
      \ channel)\n\n    offer_1_list, offer_2_list, offer_3_list = [] , [], [] \n\n\
      \    df_base[['hsia_speed1', 'hs_max_speed_numeric1', 'hsia_price1', 'promo_seg1']]\
      \  = df_base.apply(lambda row: pd.Series(find_casa_irpc_offers(list_hsia_speed,\
      \ dict_hsia_plans_details, dict_hsia_prices_details, row, 1)), axis=1)\n   \
      \ df_base[['hsia_speed2', 'hs_max_speed_numeric2', 'hsia_price2', 'promo_seg2']]\
      \  = df_base.apply(lambda row: pd.Series(find_casa_irpc_offers(list_hsia_speed,\
      \ dict_hsia_plans_details, dict_hsia_prices_details, row, 2)), axis=1)\n   \
      \ df_base[['hsia_speed3', 'hs_max_speed_numeric3', 'hsia_price3', 'promo_seg3']]\
      \  = df_base.apply(lambda row: pd.Series(find_casa_irpc_offers(list_hsia_speed,\
      \ dict_hsia_plans_details, dict_hsia_prices_details, row, 3)), axis=1)\n\n \
      \   df_base.to_csv(backup_save_data_path, index=False)\n\n    df_base = df_base[['cust_id',\
      \ 'bacct_num', 'fms_address_id', 'lpds_id', 'candate', 'OPTIK_TV_IND', 'HSIA_IND',\
      \ 'hs_max_speed_numeric', 'provisioned_hs_speed_numeric', \n             'rpp_hsia_end_dt',\
      \ 'rpp_ttv_end_dt', 'total_charges', 'promo_seg1', 'promo_seg2', 'promo_seg3']]\
      \ \n\n    df_base.to_csv(save_data_path, index=False)\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - offer_attachment_casa
