name: Reg offers base cat3
inputs:
- {name: project_id, type: String}
- {name: offer_parameter, type: String}
- {name: whsia_eligible_base, type: String}
- {name: qua_base, type: String}
- {name: token, type: String}
implementation:
  container:
    image: northamerica-northeast1-docker.pkg.dev/cio-workbench-image-np-0ddefe/bi-platform/bi-aaaie/images/kfp-pycaret-slim:latest
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.18' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef reg_offers_base_cat3(project_id: str\n                   \
      \         , offer_parameter: str\n                            , whsia_eligible_base:\
      \ str\n                            , qua_base: str\n                       \
      \     , token: str\n                            ):\n\n    import pandas as pd\n\
      \    import sys\n    import os\n    import re\n    import time\n    from pathlib\
      \ import Path\n    import pdb\n    from yaml import safe_load\n\n    from google.cloud\
      \ import bigquery\n    import logging \n    from datetime import datetime\n\n\
      \    #### For wb\n    import google.oauth2.credentials\n    CREDENTIALS = google.oauth2.credentials.Credentials(token)\n\
      \n    client = bigquery.Client(project=project_id, credentials=CREDENTIALS)\n\
      \    job_config = bigquery.QueryJobConfig()\n\n#     #### For prod \n#     client\
      \ = bigquery.Client(project=project_id)\n#     job_config = bigquery.QueryJobConfig()\n\
      \n    \"\"\"\n    This program creates eligible bases for three categories of\
      \ customers\n      - existing home solutions customers\n      - naked mobility\
      \ customers\n      - cat3\n\n    Initially drafted in Feb 2024\n      - @author:\
      \ T892899\n\n\n    v0d4 @author: T892899; Feb 29, 2024\n      - update ffh_bas\
      \ query to welcome 9167815983798937909\n      - double check pending orders\n\
      \n\n    v0d5 @author: T892899; Mar 4th, 2024\n      - update a few tables\n\
      \       - bi-srv-hsmdet-pr-7b9def.campaign_data.bq_dly_dbm_customer_profl\n\
      \       - bi-srv-hsmdet-pr-7b9def.campaign_data.bq_fda_mob_mobility_base\n \
      \      - bi-srv-divgdsa-pr-098bdd.common.bq_mobility_active_data\n\n\n    v0d6\
      \ @author: T892899; Mar 6th, 2024\n      - Add SHS Pro-install eligibility flag\n\
      \        - this table is still a temp table, which requires more formal solution\
      \ in the future\n      - Adjust MOB offer filters\n\n\n    v0d7 @author: T892899;\
      \ Mar 8th, 2024\n      - Update Offer parameter BQ table - formal source / daily\
      \ update\n      - New function for cr8bqt_sql_BI\n      - Update demostats data\
      \ source\n\n\n    v0d8 @author: T892899; Mar 13th, 2024\n      - Update SHS\
      \ Pro-install eligibility BQ table - BI layer\n      - Rename NCID to offer_code\n\
      \      - Modify function last_dt_check\n\n\n    v0d9 @author: T892899; Mar 22th,\
      \ 2024\n      - Update some project names to be a variable, for easy stg to\
      \ srv update \n      - Add dwelling type to existing customers\n\n    Notes:\
      \ Feb 2024\n     - SHS eligibility flag need to be added\n     - prod_cd to\
      \ be changed to bq table\n     - TOS tier model need to be added\n     - HSIC\
      \ tier model need to be added\n     - valid start/end date format\n        -\
      \ details to confirm with Weibo/Francis\n        - 2022-01-01T00:00:00.000Z\n\
      \n    \"\"\"\n\n    # define some functions\n    # please feel free to improve\
      \ as fit\n    def cr8bqt_sql_BI(\n        clnt,\n        sql_base,\n       \
      \ opt,\n        est_num\n        ): \n\n        sql_s1 =f\"\"\"\n\n        \
      \    TRUNCATE TABLE `{opt}_temp`;   \n            INSERT INTO `{opt}_temp`\n\
      \            {sql_base}            \n\n            \"\"\" \n\n        crdt_s1\
      \ = clnt.query(sql_s1).to_dataframe()\n\n        tableid = opt.split('.')\n\n\
      \        sql_s2 =f\"\"\"\n\n                SELECT\n                  row_count\n\
      \                FROM `{tableid[0]}.{tableid[1]}`.__TABLES__\n             \
      \   where table_id = '{tableid[2]}_temp'\n                ;\n\n            \"\
      \"\" \n\n        crdt_s2 = clnt.query(sql_s2).to_dataframe()\n\n        if crdt_s2['row_count'][0]\
      \ > est_num:\n            sql_s3 =f\"\"\"\n\n                TRUNCATE TABLE\
      \ `{opt}`;   \n                INSERT INTO `{opt}`\n                select *\
      \ from `{opt}_temp`\n\n            \"\"\" \n            crdt_s3 = clnt.query(sql_s3).to_dataframe()\n\
      \n        else:\n            raise Exception(f\"{opt}_temp has {crdt_s2['row_count'][0]}\
      \ rows -- seems low. Update aborted.\")\n\n    def last_dt_check(\n        clnt,\n\
      \        ipt,\n        part_dt,\n        wd\n        ): \n\n        sql_s1 =f\"\
      \"\"\n\n            with\n                max_date1 as (\n                 \
      \   SELECT \n                        0 as a\n                        , {part_dt}\
      \ \n                        , count({part_dt}) as mxx\n                    FROM\
      \ `{ipt}`\n                        WHERE {part_dt} >= DATE_SUB(CURRENT_DATE(),\
      \ INTERVAL {wd} DAY)\n                    group by a, {part_dt}\n          \
      \          order by a, {part_dt} desc\n                    )\n             \
      \   ,  max_date2 as (\n                    select\n                        0\
      \ as a\n                        , avg(mxx) as mxx_avg\n                    from\
      \ max_date1\n                        group by a\n                    )\n\n \
      \               select\n                    cast(max(a.{part_dt}) AS STRING)\
      \ as part_dt\n                from max_date1 a left join max_date2 b\n     \
      \           on a.a = b.a\n                where a.mxx >= b.mxx_avg * 0.8\n\n\
      \        \"\"\" \n\n        crdt_s1 = clnt.query(sql_s1).to_dataframe()\n\n\
      \        return(crdt_s1['part_dt'][0])\n\n    # Beginning of Part 3\n\n    #\
      \ Creating eligible base for CSD channel technicians\n    # for brand new customers\
      \ with pending orders \n\n\n    # Pull Offer Info\n\n    sq0l =f\"\"\"\n\n \
      \      with\n            max_dt as (    \n              SELECT \n          \
      \    max(part_dt) as part_dt\n              FROM `{offer_parameter}` \n    \
      \        )\n        select\n            Replace(a.Offer_Number, '-', '_') as\
      \ Offer_Number2\n            , a.* \n            , CAST(a.valid_start_ts AS\
      \ DATE FORMAT 'MON DD, YYYY') AS valid_start_dt \n            , CAST(a.valid_end_ts\
      \ AS DATE FORMAT 'MON DD, YYYY') AS valid_end_dt\n        from `{offer_parameter}`\
      \ a \n        inner join max_dt b\n        on a.part_dt = b.part_dt\n      \
      \  where a.if_active = 1 and a.HS_filters is not null and if_cat3 = 1\n\n  \
      \  \"\"\" \n\n    offer_info = client.query(sq0l).to_dataframe()\n\n\n    #\
      \ Check latest snapshot date with reasonable counts\n\n\n    last_dt_pid = last_dt_check(clnt\
      \ = client,\n                                ipt = 'bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance_details',\n\
      \                                part_dt = 'part_load_dt',\n               \
      \                 wd = 14 )\n\n    last_dt_pi = last_dt_check(clnt = client,\n\
      \                                ipt = 'bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance',\n\
      \                                part_dt = 'part_load_dt',\n               \
      \                 wd = 14 )\n\n    last_dt_spd = last_dt_check(clnt = client,\n\
      \                                ipt = 'bi-srv-divgdsa-pr-098bdd.common.bq_premise_universe',\n\
      \                                part_dt = 'part_dt' ,\n                   \
      \             wd = 14)\n\n\n\n    # Create cat3 customer profile - base\n\n\
      \    sq0l =f\"\"\"\n\n        with cat3_bas as (\n\n                select \
      \ \n                    cust_id\n                    , bill_account_number as\
      \ bacct_num\n                    , lpds_id\n                    , max(case when\
      \ product_family = 'TOS' then 1 else 0 end) as TOS_IND\n                   \
      \ , max(case when product_family = 'HSIC' then 1 else 0 end) as HSIA_ind\n \
      \                   , max(case when product_family = 'SMHM' then 1 else 0 end)\
      \ as SHS_ind\n                    , max(case when product_family = 'TTV' then\
      \ 1 else 0 end) as OPTIK_TV_IND\n                    , max(case when product_family\
      \ = 'SING' then 1 else 0 end) as HP_IND\n                    , max(case when\
      \ product_family = 'WIFI' then 1 else 0 end) as WFP_ind\n                  \
      \  , max(case when product_family = 'WHSIA' then 1 else 0 end) as SMART_HUB_IND\n\
      \                    , max(case when product_family = 'LWC' then 1 else 0 end)\
      \ as LWC_ind\n                    , max(case when product_family = 'SWS' then\
      \ 1 else 0 end) as SWS_ind\n                    , max(case when product_family\
      \ = 'SOD' then 1 else 0 end) as SOD_ind\n                    , max(case when\
      \ product_family = 'HPRO' then 1 else 0 end) as HPRO_ind\n                 from\
      \ `bi-srv-hsmsd-3c-pr-ca2cd4.hsmsd_3c_rpt_dataset.bq_rpt_chnl_order_ffh_dtl_view`\n\
      \                where is_current_order = 1 and current_yield_dt >= DATE_SUB(CURRENT_DATE(),\
      \ INTERVAL 100 DAY)\n                    and (current_yield_sub_status = 'Pending')\n\
      \                    and current_order_status = 'Processing'\n             \
      \       and soi_transaction_type = 'Enroll'\n                    and is_existing_customer\
      \ = 0\n                    group by 1,2,3\n\n        )\n\n        , spd as (\n\
      \n            select distinct\n                lpds_id\n                , fms_address_id\n\
      \                , postal_cd as SERV_POSTAL_CODE\n                , hs_max_speed_bonded\
      \ as HSIA_MAX_SPD\n                , SYSTEM_PROVINCE_CD as SERV_PROV\n     \
      \           , snet_premise_type_cd\n                , ttv_eligible_ind as OPTIK_ELIGIBLE\n\
      \                , ttv_port_availability \n                , gpon_sellable_ind\
      \ as TECH_GPON\n            from `bi-srv-divgdsa-pr-098bdd.common.bq_premise_universe`\
      \ \n            WHERE part_dt = '{last_dt_spd}'\n        )\n\n\n        , pid\
      \ as (\n\n                select \n                  cust_id\n             \
      \     , max(case when access_technology = 'COPPER' then 1 else 0 end) as cpf_acctech_copper_ind\n\
      \                  , max(case when access_technology = 'FIBRE' then 1 else 0\
      \ end) as cpf_acctech_fibre_ind\n                  , max(case when access_technology\
      \ = 'WIRELESS' then 1 else 0 end) as cpf_acctech_wls_ind\n                 \
      \ , max(case when access_technology = 'SATELLITE' then 1 else 0 end) as cpf_acctech_satellite_ind\n\
      \                  , sum(case when service_instance_type_cd != 'DIIC' then 1\
      \ else 0 end) as cpf_prod_cnt\n                  , max(case when service_instance_type_cd\
      \ = 'DIIC' then 1 else 0 end) as cpf_diic_ind\n                  , max(case\
      \ when service_instance_type_cd = 'HSIC' then 1 else 0 end) as cpf_hsic_ind\n\
      \                  , max(case when service_instance_type_cd = 'HSIC' then provisioned_hs\
      \ else null end) as cpf_provisioned_hs\n                  , max(case when service_instance_type_cd\
      \ = 'LWC' then 1 else 0 end) as cpf_lwc_ind\n                  , max(case when\
      \ service_instance_type_cd = 'PIK' then 1 else 0 end) as cpf_pik_ind\n     \
      \             , max(case when service_instance_type_cd = 'SHS' then 1 else 0\
      \ end) as cpf_shs_ind\n                  , max(case when prod_intrnl_nm in ('Smart\
      \ Automation Plus', 'Smart Automation Plus (V2)'\n                         \
      \ , 'Smart Camera (V2)', 'Secure Business: Smart Camera') then 1 else 0 end)\
      \ as cpf_shs_ind2\n                  , max(case when service_instance_type_cd\
      \ = 'SING' then 1 else 0 end) as cpf_sing_ind\n                  , max(case\
      \ when service_instance_type_cd = 'STV' then 1 else 0 end) as cpf_stv_ind\n\
      \                  , max(case when service_instance_type_cd = 'SWS' then 1 else\
      \ 0 end) as cpf_sws_ind\n                  , max(case when service_instance_type_cd\
      \ = 'STMP' then 1 else 0 end) as cpf_stmp_ind\n                  , max(case\
      \ when service_instance_type_cd = 'TOS' then 1 else 0 end) as cpf_tos_ind\n\
      \                  , max(case when service_instance_type_cd = 'TOS'\n      \
      \                    and prod_cd = '40983311' then 1 else 0 end) as cpf_tos_basic_ind\n\
      \                  , max(case when service_instance_type_cd = 'TOS'\n      \
      \                    and prod_cd = '41079641' then 1 else 0 end) as cpf_tos_standard_ind\n\
      \                  , max(case when service_instance_type_cd = 'TTV' then 1 else\
      \ 0 end) as cpf_ttv_ind\n                  , max(case when service_instance_type_cd\
      \ = 'WFP' then 1 else 0 end) as cpf_wfp_ind\n                  , max(case when\
      \ service_instance_type_cd = 'WHSIA' then 1 else 0 end) as cpf_whsia_ind  \n\
      \                  , max(case when service_instance_type_cd = 'HPRO' then 1\
      \ else 0 end) as cpf_HPRO_ind   \n\n                  from `bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance`\n\
      \                        where part_load_dt = '{last_dt_pi}'\n             \
      \         and product_instance_status_cd = 'A' and current_ind = 1\n       \
      \             group by cust_id\n\n        )    \n\n        , ffh_bas as (\n\
      \            select \n                a.*\n                , b.* except (lpds_id)\n\
      \                , c.* except (cust_id)\n\n                , 0 as EX_STANDARD_EX\n\
      \                , 0 as std_exclud2\n                , 'FIFA' as PROVISIONING_SYSTEM\n\
      \                , 0 as MNH_MOB_BAN\n                , '' as SHS_CONTRACT_END_DT\n\
      \                , 0 as REWARDS_POINT_BALANCE\n                , CAST(NULL AS\
      \ TIMESTAMP) as ACCT_START_DT\n                , 0 as OPTIK_PACKAGE_NUM\n  \
      \              , 0 as STV_IND\n                , 0 as PIK_TV_IND\n\n       \
      \         , case when (( d.HTA1519_pct > 0.25)\n                           \
      \     or ( d.HTA2024_pct > 0.25)\n                                or ( d.HTA2529_pct\
      \ > 0.25)\n                                or ( d.HTA3034_pct > 0.25)\n    \
      \                            or ( d.HTA3539_pct > 0.25)\n                  \
      \              or ( d.HTA4044_pct > 0.25)\n\n                              \
      \  or ( d.HMA1519_pct > 0.25)\n                                or ( d.HMA2024_pct\
      \ > 0.25)\n                                or ( d.HMA2529_pct > 0.25)\n    \
      \                            or ( d.HMA3034_pct > 0.25)\n                  \
      \              or ( d.HMA3539_pct > 0.25)\n                                or\
      \ ( d.HMA4044_pct > 0.25)\n\n                                or ( d.HFA1519_pct\
      \ > 0.25)\n                                or ( d.HFA2024_pct > 0.25)\n    \
      \                            or ( d.HFA2529_pct > 0.25)\n                  \
      \              or ( d.HFA3034_pct > 0.25)\n                                or\
      \ ( d.HFA3539_pct > 0.25)\n                                or ( d.HFA4044_pct\
      \ > 0.25)) then 1 else 0 end as demo_hs_189_ind\n\n                , case when\
      \ d.baskid > 50 then 1 else 0 end as demo_hs_188_ind\n\n                , RAND()\
      \ as rand_seed1\n\n                , 0 as hs_202_ind\n\n                , f.wHSIAQualTypeMarketing\n\
      \n                , case when g1.ACQ_DATE is not null\n                    \
      \        or g3.ACQ_DATE is not null\n                            then 1 else\
      \ 0 end as alarm_full_universe\n\n                , 0 as hs_71_ind\n\n     \
      \       from cat3_bas a            \n            left join spd b on a.lpds_id\
      \ = cast(b.lpds_id as STRING)\n            left join pid c on a.cust_id = cast(c.cust_id\
      \ as STRING) \n            left join `bi-srv-divgdsa-pr-098bdd.environics_derived.bq_demostats_2023_features`\
      \ d on b.SERV_POSTAL_CODE = d.code\n            left join `{whsia_eligible_base}`\
      \ f on a.LPDS_ID = cast(f.LPDSId as STRING)\n            left join `bi-srv-hsmdet-pr-7b9def.hsmdet_public.bq_pub_fda_alarm_full_universe`\
      \ g1\n                on a.cust_id is not null and a.cust_id = cast(g1.cust_id\
      \ as STRING)\n            left join `bi-srv-hsmdet-pr-7b9def.hsmdet_public.bq_pub_fda_alarm_full_universe`\
      \ g3\n                on b.FMS_ADDRESS_ID is not null and b.FMS_ADDRESS_ID =\
      \ g3.FMS_ADDRESS_ID        \n\n            )\n\n\n    \"\"\" \n\n    # Create\
      \ eligible base for each offer\n\n    sql_all = sq0l\n    n_offer = offer_info.shape[0]\n\
      \    for ii in range(n_offer):\n        ii2 = ii + 1\n\n        sql_b1 = (\n\
      \                f\"\"\", {offer_info['Offer_Number2'][ii]} as (\n         \
      \       select distinct cast(cust_id as int64) as cust_id \\n\n            \
      \    , cast(bacct_num as int64) as bacct_num \\n\n                , cast(lpds_id\
      \ as int64) as lpds_id \\n\n                , cast(ACCT_START_DT as timestamp)\
      \ as candate \\n\n                , '{offer_info['Category'][ii]}' as Category\
      \  \\n\n                , '{offer_info['Subcategory'][ii]}' as Subcategory \
      \ \\n \n                , '' as digital_category\n                , '{offer_info['promo_seg'][ii]}'\
      \ as promo_seg  \\n \n                , '{offer_info['NCID'][ii]}' as offer_code\
      \  \\n \n                , cast('{offer_info['valid_start_dt'][ii]}' AS DATE)\
      \ as ASSMT_VALID_START_TS  \\n\n                , cast('{offer_info['valid_end_dt'][ii]}'\
      \ AS DATE) as ASSMT_VALID_END_TS  \\n \n                , {str(offer_info['rk'][ii])}\
      \ as rk  \\n\n                from ffh_bas \\n where  {offer_info['HS_filters'][ii]}\
      \ )  \\n \"\"\"\n               )\n\n        sql_all0 = sql_all + sql_b1\n\n\
      \        sql_all = sql_all0\n\n\n    # Union eligible bases\n\n    sql_all0\
      \ = sql_all + f\" select * from {offer_info['Offer_Number2'][0]} \\n\"\n   \
      \ sql_all = sql_all0\n    n_offer = offer_info.shape[0] - 1\n    for ii in range(n_offer):\n\
      \        ii2 = ii + 1\n        sql_b2 = f\" union all select * from {offer_info['Offer_Number2'][ii2]}\
      \  \\n\"\n        sql_all0 = sql_all + sql_b2\n        sql_all = sql_all0\n\n\
      \n    # check base count before creating multiple eligible base\n    # \n\n\
      \    sq0l =\"\"\"\n\n            select count(distinct cust_id) as cnt \n  \
      \           from `bi-srv-hsmsd-3c-pr-ca2cd4.hsmsd_3c_rpt_dataset.bq_rpt_chnl_order_ffh_dtl_view`\n\
      \            where is_current_order = 1 \n                and current_yield_dt\
      \ >= DATE_SUB(CURRENT_DATE(), INTERVAL 180 DAY)\n                and (current_yield_sub_status\
      \ = 'Pending')\n                and current_order_status = 'Processing'\n  \
      \              and soi_transaction_type = 'Enroll'\n                and is_existing_customer\
      \ = 0\n\n    \"\"\" \n\n    df_check = client.query(sq0l).to_dataframe()\n\n\
      \n\n    start_time = time.time()\n\n    if df_check['cnt'][0] > 500:\n     \
      \   cr8bqt_sql_BI(\n            clnt = client,\n            sql_base = sql_all,\n\
      \            opt = qua_base,\n            est_num = 1500\n        )\n\n    else:\n\
      \        raise Exception(f\"Cat3 base has {df_check['cnt'][0]} rows -- seems\
      \ low. Update aborted.\")\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - reg_offers_base_cat3
