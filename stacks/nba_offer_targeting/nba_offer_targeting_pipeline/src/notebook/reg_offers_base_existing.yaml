name: Reg offers base existing
inputs:
- {name: project_id, type: String}
- {name: offer_parameter, type: String}
- {name: whsia_eligible_base, type: String}
- {name: shs_professional_install, type: String}
- {name: prod_cd2remove, type: String}
- {name: qua_base, type: String}
- {name: token, type: String}
implementation:
  container:
    image: northamerica-northeast1-docker.pkg.dev/cio-workbench-image-np-0ddefe/bi-platform/bi-aaaie/images/kfp-pycaret-slim:latest
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.18' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef reg_offers_base_existing(project_id: str\n               \
      \             , offer_parameter: str\n                            , whsia_eligible_base:\
      \ str\n                            , shs_professional_install: str\n       \
      \                     , prod_cd2remove: str\n                            , qua_base:\
      \ str\n                            , token: str\n                          \
      \  ):\n\n    import pandas as pd\n    import sys\n    import os\n    import\
      \ re\n    import time\n    from pathlib import Path\n    import pdb\n    from\
      \ yaml import safe_load\n\n    from google.cloud import bigquery\n    import\
      \ logging \n    from datetime import datetime\n\n    #### For wb\n    import\
      \ google.oauth2.credentials\n    CREDENTIALS = google.oauth2.credentials.Credentials(token)\n\
      \n    client = bigquery.Client(project=project_id, credentials=CREDENTIALS)\n\
      \    job_config = bigquery.QueryJobConfig()\n\n#     #### For prod \n#     client\
      \ = bigquery.Client(project=project_id)\n#     job_config = bigquery.QueryJobConfig()\n\
      \n    \"\"\"\n    This program creates eligible bases for three categories of\
      \ customers\n      - existing home solutions customers\n      - naked mobility\
      \ customers\n      - cat3\n\n    Initially drafted in Feb 2024\n      - @author:\
      \ T892899\n\n\n    v0d4 @author: T892899; Feb 29, 2024\n      - update ffh_bas\
      \ query to welcome 9167815983798937909\n      - double check pending orders\n\
      \n\n    v0d5 @author: T892899; Mar 4th, 2024\n      - update a few tables\n\
      \       - bi-srv-hsmdet-pr-7b9def.campaign_data.bq_dly_dbm_customer_profl\n\
      \       - bi-srv-hsmdet-pr-7b9def.campaign_data.bq_fda_mob_mobility_base\n \
      \      - bi-srv-divgdsa-pr-098bdd.common.bq_mobility_active_data\n\n\n    v0d6\
      \ @author: T892899; Mar 6th, 2024\n      - Add SHS Pro-install eligibility flag\n\
      \        - this table is still a temp table, which requires more formal solution\
      \ in the future\n      - Adjust MOB offer filters\n\n\n    v0d7 @author: T892899;\
      \ Mar 8th, 2024\n      - Update Offer parameter BQ table - formal source / daily\
      \ update\n      - New function for cr8bqt_sql_BI\n      - Update demostats data\
      \ source\n\n\n    v0d8 @author: T892899; Mar 13th, 2024\n      - Update SHS\
      \ Pro-install eligibility BQ table - BI layer\n      - Rename NCID to offer_code\n\
      \      - Modify function last_dt_check\n\n\n    v0d9 @author: T892899; Mar 22th,\
      \ 2024\n      - Update some project names to be a variable, for easy stg to\
      \ srv update \n      - Add dwelling type to existing customers\n\n    Notes:\
      \ Feb 2024\n     - SHS eligibility flag need to be added\n     - prod_cd to\
      \ be changed to bq table\n     - TOS tier model need to be added\n     - HSIC\
      \ tier model need to be added\n     - valid start/end date format\n        -\
      \ details to confirm with Weibo/Francis\n        - 2022-01-01T00:00:00.000Z\n\
      \n    \"\"\"\n\n    # define some functions\n    # please feel free to improve\
      \ as fit\n    def cr8bqt_sql_BI(\n        clnt,\n        sql_base,\n       \
      \ opt,\n        est_num\n        ): \n\n        sql_s1 =f\"\"\"\n\n        \
      \    TRUNCATE TABLE `{opt}_temp`;   \n            --INSERT INTO `{opt}_temp`\n\
      \            {sql_base}\n\n            \"\"\" \n\n        crdt_s1 = clnt.query(sql_s1).to_dataframe()\n\
      \n        tableid = opt.split('.')\n\n        sql_s2 =f\"\"\"\n\n          \
      \      SELECT\n                  row_count\n                FROM `{tableid[0]}.{tableid[1]}`.__TABLES__\n\
      \                where table_id = '{tableid[2]}_temp'\n                ;\n\n\
      \            \"\"\" \n\n        crdt_s2 = clnt.query(sql_s2).to_dataframe()\n\
      \n        if crdt_s2['row_count'][0] > est_num:\n            sql_s3 =f\"\"\"\
      \n\n                TRUNCATE TABLE `{opt}`;   \n                INSERT INTO\
      \ `{opt}`\n                select * from `{opt}_temp`\n\n            \"\"\"\
      \ \n            crdt_s3 = clnt.query(sql_s3).to_dataframe()\n\n        else:\n\
      \            raise Exception(f\"{opt}_temp has {crdt_s2['row_count'][0]} rows\
      \ -- seems low. Update aborted.\")\n\n    def last_dt_check(\n        clnt,\n\
      \        ipt,\n        part_dt,\n        wd\n        ): \n\n        sql_s1 =f\"\
      \"\"\n\n            with\n                max_date1 as (\n                 \
      \   SELECT \n                        0 as a\n                        , {part_dt}\
      \ \n                        , count({part_dt}) as mxx\n                    FROM\
      \ `{ipt}`\n                        WHERE {part_dt} >= DATE_SUB(CURRENT_DATE(),\
      \ INTERVAL {wd} DAY)\n                    group by a, {part_dt}\n          \
      \          order by a, {part_dt} desc\n                    )\n             \
      \   ,  max_date2 as (\n                    select\n                        0\
      \ as a\n                        , avg(mxx) as mxx_avg\n                    from\
      \ max_date1\n                        group by a\n                    )\n\n \
      \               select\n                    cast(max(a.{part_dt}) AS STRING)\
      \ as part_dt\n                from max_date1 a left join max_date2 b\n     \
      \           on a.a = b.a\n                where a.mxx >= b.mxx_avg * 0.8\n\n\
      \        \"\"\" \n\n        crdt_s1 = clnt.query(sql_s1).to_dataframe()\n\n\
      \        return(crdt_s1['part_dt'][0])\n\n    # Beginning of Part 1\n    # Creating\
      \ eligible base for existing home solutions customers\n    # Pull Offer Info\n\
      \n    sq0l =f\"\"\"\n       with\n            max_dt as (    \n            \
      \  SELECT \n              max(part_dt) as part_dt\n              FROM `{offer_parameter}`\
      \ \n            )\n        select\n            Replace(a.Offer_Number, '-',\
      \ '_') as Offer_Number2\n            , a.* \n            , CAST(a.valid_start_ts\
      \ AS DATE FORMAT 'MON DD, YYYY') AS valid_start_dt \n            , CAST(a.valid_end_ts\
      \ AS DATE FORMAT 'MON DD, YYYY') AS valid_end_dt\n        from `{offer_parameter}`\
      \ a \n        inner join max_dt b\n        on a.part_dt = b.part_dt\n      \
      \  where a.if_active = 1 and a.HS_filters is not null\n    \"\"\" \n\n    offer_info\
      \ = client.query(sq0l).to_dataframe()\n\n    # Check latest snapshot date with\
      \ reasonable counts\n\n    last_dt_spd = last_dt_check(clnt = client,\n    \
      \                            ipt = 'bi-srv-divgdsa-pr-098bdd.common.bq_premise_universe',\n\
      \                                part_dt = 'part_dt',\n                    \
      \            wd = 14 )\n\n    last_dt_pid = last_dt_check(clnt = client,\n \
      \                               ipt = 'bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance_details',\n\
      \                                part_dt = 'part_load_dt',\n               \
      \                 wd = 14 )\n\n    last_dt_pi = last_dt_check(clnt = client,\n\
      \                                ipt = 'bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance',\n\
      \                                part_dt = 'part_load_dt',\n               \
      \                 wd = 14 )\n\n    last_dt_gateway = last_dt_check(clnt = client,\n\
      \                                ipt = 'cio-datahub-enterprise-pr-183a.ent_resrc_config.bq_product_instance_gateway_daily_snpsht',\n\
      \                                part_dt = 'snapshot_load_dt',\n           \
      \                     wd = 60 )\n\n    # last_dt_game = last_dt_check(clnt =\
      \ client,\n    #                             ipt = 'cio-datahub-enterprise-pr-183a.ent_resrc_performance_device_kpi.bq_cloudcheck_game_station',\n\
      \    #                             part_dt = 'file_rcvd_dt' )\n\n    # Create\
      \ Bigquery for HS customer profile - base\n    sq0l =f\"\"\"\n\n        CREATE\
      \ OR REPLACE TEMPORARY TABLE std1 AS \n        select distinct cust_id \n  \
      \       from `bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance_details`\n\
      \        where part_load_dt = '{last_dt_pid}'\n            and effective_end_dt\
      \ >= CURRENT_DATE()\n            and (upper(prod_intrnl_nm) like '%TSD%'\n \
      \                or upper(prod_intrnl_nm) like '%CONNECTING FAMILIES%'\n   \
      \              or upper(prod_intrnl_nm) like '%REALTOR%'\n                 or\
      \ upper(prod_intrnl_nm) like '%STRATA%' \n                )\n        ;\n\n \
      \       CREATE OR REPLACE TEMPORARY TABLE std2 AS \n        select distinct\
      \ cust_id \n         from `bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance_details`\
      \ a \n         inner join `{prod_cd2remove}` b\n         on a.prod_cd = b.prod_cd\n\
      \        where a.part_load_dt = '{last_dt_pid}'\n            and a.effective_end_dt\
      \ >= CURRENT_DATE()\n            and b.standard_exclusions = 1\n        ; \n\
      \n        CREATE OR REPLACE TEMPORARY TABLE std AS \n        select * from std1\n\
      \        union all\n        select * from std2\n        ; \n\n        CREATE\
      \ OR REPLACE TEMPORARY TABLE spd AS \n        select distinct\n            lpds_id\n\
      \            , coid \n            , snet_premise_type_cd\n        from `bi-srv-divgdsa-pr-098bdd.common.bq_premise_universe`\
      \ \n        WHERE part_dt = '{last_dt_spd}'\n        ; \n\n        CREATE OR\
      \ REPLACE TEMPORARY TABLE pid AS \n        select \n          cust_id\n    \
      \      , bacct_num\n          , max(case when access_technology = 'COPPER' then\
      \ 1 else 0 end) as cpf_acctech_copper_ind\n          , max(case when access_technology\
      \ = 'FIBRE' then 1 else 0 end) as cpf_acctech_fibre_ind\n          , max(case\
      \ when access_technology = 'WIRELESS' then 1 else 0 end) as cpf_acctech_wls_ind\n\
      \          , max(case when access_technology = 'SATELLITE' then 1 else 0 end)\
      \ as cpf_acctech_satellite_ind\n          , sum(case when service_instance_type_cd\
      \ != 'DIIC' then 1 else 0 end) as cpf_prod_cnt\n          , max(case when service_instance_type_cd\
      \ = 'DIIC' then 1 else 0 end) as cpf_diic_ind\n          , max(case when service_instance_type_cd\
      \ = 'HSIC' then 1 else 0 end) as cpf_hsic_ind\n          , max(case when service_instance_type_cd\
      \ = 'HSIC' then provisioned_hs else null end) as cpf_provisioned_hs\n      \
      \    , max(case when service_instance_type_cd = 'LWC' then 1 else 0 end) as\
      \ cpf_lwc_ind\n          , max(case when service_instance_type_cd = 'PIK' then\
      \ 1 else 0 end) as cpf_pik_ind\n          , max(case when service_instance_type_cd\
      \ = 'SHS' then 1 else 0 end) as cpf_shs_ind\n          , max(case when prod_intrnl_nm\
      \ in ('Smart Automation Plus', 'Smart Automation Plus (V2)'\n              \
      \    , 'Smart Camera (V2)', 'Secure Business: Smart Camera') then 1 else 0 end)\
      \ as cpf_shs_ind2\n          , max(case when service_instance_type_cd = 'SING'\
      \ then 1 else 0 end) as cpf_sing_ind\n          , max(case when service_instance_type_cd\
      \ = 'STV' then 1 else 0 end) as cpf_stv_ind\n          , max(case when service_instance_type_cd\
      \ = 'SWS' then 1 else 0 end) as cpf_sws_ind\n          , max(case when service_instance_type_cd\
      \ = 'STMP' then 1 else 0 end) as cpf_stmp_ind\n          , max(case when service_instance_type_cd\
      \ = 'TOS' then 1 else 0 end) as cpf_tos_ind\n          , max(case when service_instance_type_cd\
      \ = 'TOS'\n                  and prod_cd = '40983311' then 1 else 0 end) as\
      \ cpf_tos_basic_ind\n          , max(case when service_instance_type_cd = 'TOS'\n\
      \                  and prod_cd = '41079641' then 1 else 0 end) as cpf_tos_standard_ind\n\
      \          , max(case when service_instance_type_cd = 'TTV' then 1 else 0 end)\
      \ as cpf_ttv_ind\n          , max(case when service_instance_type_cd = 'WFP'\
      \ then 1 else 0 end) as cpf_wfp_ind\n          , max(case when service_instance_type_cd\
      \ = 'WHSIA' then 1 else 0 end) as cpf_whsia_ind  \n          , max(case when\
      \ service_instance_type_cd = 'HPRO' then 1 else 0 end) as cpf_HPRO_ind   \n\n\
      \          from `bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance`\n \
      \               where part_load_dt = '{last_dt_pi}'\n              and product_instance_status_cd\
      \ = 'A' and current_ind = 1\n            group by cust_id, bacct_num\n     \
      \   ; \n\n        CREATE OR REPLACE TEMPORARY TABLE pid4hproplus AS\n      \
      \  select distinct\n          cust_id\n          , bacct_num\n\n          from\
      \ `bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance`\n               \
      \ where part_load_dt = '{last_dt_pi}'\n              and product_instance_status_cd\
      \ = 'A' and current_ind = 1\n              and service_instance_type_cd in ('HSIC','WHSIA','TTV','SHS','SWS')\n\
      \                and si_start_dt >= DATE_SUB(CURRENT_DATE(), INTERVAL 30 DAY)\n\
      \        ; \n\n        CREATE OR REPLACE TEMPORARY TABLE pid_all AS \n     \
      \   select distinct\n          cust_id\n          , bacct_num\n          , product_instance_id\n\
      \          from `bi-srv-divgdsa-pr-098bdd.common.bq_hs_product_instance`\n \
      \               where part_load_dt = '{last_dt_pi}'\n              and product_instance_status_cd\
      \ = 'A' and current_ind = 1\n        ; \n\n        CREATE OR REPLACE TEMPORARY\
      \ TABLE custid_gaming AS\n        select distinct cust_id\n        , lpds_id\n\
      \         FROM `cdo-dse-workspace-np-45d0d5.featurestore.daily_cp_prod_gaming`\
      \ \n         where cpf_gaming_6m_ind > 0\n        ; \n\n        CREATE OR REPLACE\
      \ TEMPORARY TABLE pending_orders AS \n        select  \n            cust_id\n\
      \            , lpds_id\n            , max(case when product_family = 'TOS' then\
      \ 1 else 0 end) as TOS_IND\n            , max(case when product_family = 'HSIC'\
      \ then 1 else 0 end) as HSIA_ind\n            , max(case when product_family\
      \ = 'SMHM' then 1 else 0 end) as SHS_ind\n            , max(case when product_family\
      \ = 'TTV' then 1 else 0 end) as OPTIK_TV_IND\n            , max(case when product_family\
      \ = 'SING' then 1 else 0 end) as HP_IND\n            , max(case when product_family\
      \ = 'WIFI' then 1 else 0 end) as WFP_ind\n            , max(case when product_family\
      \ = 'WHSIA' then 1 else 0 end) as SMART_HUB_IND\n            , max(case when\
      \ product_family = 'LWC' then 1 else 0 end) as LWC_ind\n            , max(case\
      \ when product_family = 'SWS' then 1 else 0 end) as SWS_ind\n            , max(case\
      \ when product_family = 'SOD' then 1 else 0 end) as SOD_ind\n            , max(case\
      \ when product_family = 'HPRO' then 1 else 0 end) as HPRO_ind\n         from\
      \ `bi-srv-hsmsd-3c-pr-ca2cd4.hsmsd_3c_rpt_dataset.bq_rpt_chnl_order_ffh_dtl_view`\n\
      \        where is_current_order = 1 and current_yield_dt >= DATE_SUB(CURRENT_DATE(),\
      \ INTERVAL 100 DAY)\n            and (current_yield_sub_status = 'Pending')\n\
      \            and current_order_status = 'Processing'\n            and soi_transaction_type\
      \ = 'Enroll'\n            group by 1,2\n        ; \n\n        CREATE OR REPLACE\
      \ TEMPORARY TABLE ffh_bas AS\n        select \n            a.* except (OPTIK_TV_IND\n\
      \                        , HSIA_IND\n                        , HP_IND\n    \
      \                    , LWC_IND\n                        , SHS_IND\n        \
      \                , SWS_IND\n                        , SMART_HUB_IND)\n\n   \
      \         , case when a.OPTIK_TV_IND > 0 or k.OPTIK_TV_IND > 0 then 1 else 0\
      \ end as OPTIK_TV_IND\n            , case when a.HSIA_IND > 0 or k.HSIA_IND\
      \ > 0 then 1 else 0 end as HSIA_IND\n            , case when a.HP_IND > 0 or\
      \ k.HP_IND > 0 then 1 else 0 end as HP_IND\n            , case when a.SHS_IND\
      \ > 0 or k.SHS_IND > 0 then 1 else 0 end as SHS_IND\n            , case when\
      \ a.LWC_IND > 0 or k.LWC_IND > 0 then 1 else 0 end as LWC_IND\n            ,\
      \ case when a.SWS_IND > 0 or k.SWS_IND > 0 then 1 else 0 end as SWS_IND\n  \
      \          , case when a.SMART_HUB_IND > 0 or k.SMART_HUB_IND > 0 then 1 else\
      \ 0 end as SMART_HUB_IND\n\n            , case when b.cust_id is null then 0\
      \ else 1 end as std_exclud2\n\n            , c.* except (cust_id, bacct_num,\
      \ cpf_HPRO_ind, cpf_wfp_ind, cpf_whsia_ind)\n            , case when c.cpf_whsia_ind\
      \ > 0 or k.SMART_HUB_IND > 0 then 1 else 0 end as cpf_whsia_ind\n          \
      \  , case when c.cpf_wfp_ind > 0 or k.WFP_ind > 0 then 1 else 0 end as cpf_wfp_ind\n\
      \            , case when c.cpf_HPRO_ind > 0 or k.HPRO_ind > 0 then 1 else 0\
      \ end as cpf_HPRO_ind\n\n            , case when (( d.HTA1519_pct > 0.25)\n\
      \                            or ( d.HTA2024_pct > 0.25)\n                  \
      \          or ( d.HTA2529_pct > 0.25)\n                            or ( d.HTA3034_pct\
      \ > 0.25)\n                            or ( d.HTA3539_pct > 0.25)\n        \
      \                    or ( d.HTA4044_pct > 0.25)\n\n                        \
      \    or ( d.HMA1519_pct > 0.25)\n                            or ( d.HMA2024_pct\
      \ > 0.25)\n                            or ( d.HMA2529_pct > 0.25)\n        \
      \                    or ( d.HMA3034_pct > 0.25)\n                          \
      \  or ( d.HMA3539_pct > 0.25)\n                            or ( d.HMA4044_pct\
      \ > 0.25)\n\n                            or ( d.HFA1519_pct > 0.25)\n      \
      \                      or ( d.HFA2024_pct > 0.25)\n                        \
      \    or ( d.HFA2529_pct > 0.25)\n                            or ( d.HFA3034_pct\
      \ > 0.25)\n                            or ( d.HFA3539_pct > 0.25)\n        \
      \                    or ( d.HFA4044_pct > 0.25)) then 1 else 0 end as demo_hs_189_ind\n\
      \n            , case when d.baskid > 50 then 1 else 0 end as demo_hs_188_ind\n\
      \n            , RAND() as rand_seed1\n\n            , case when e.cust_id is\
      \ not null then 1 else 0 end as hs_202_ind\n\n            , f.wHSIAQualTypeMarketing\n\
      \n            , case when g1.ACQ_DATE is not null\n                        or\
      \ g2.ACQ_DATE is not null\n                        or g3.ACQ_DATE is not null\n\
      \                        then 1 else 0 end as alarm_full_universe\n\n      \
      \      , case when j.cust_id is not null then 1 else 0 end as hs_71_ind\n\n\
      \            , case when a.serv_prov in ('AB', 'BC') \n                    or\
      \ h.Coverage_Status like '%Professional%' \n                    then 1 else\
      \ 0 end as shs_professional_install\n\n            , m.snet_premise_type_cd\n\
      \n        from `bi-srv-hsmdet-pr-7b9def.campaign_data.bq_dly_dbm_customer_profl`\
      \ a\n        left join std b on a.cust_id = b.cust_id\n        left join pid\
      \ c on a.cust_id = c.cust_id and a.bacct_num = c.bacct_num \n        left join\
      \ `bi-srv-divgdsa-pr-098bdd.environics_derived.bq_demostats_2023_features` d\n\
      \            on a.SERV_POSTAL_CODE = d.code\n        left join pid4hproplus\
      \ e on a.cust_id = e.cust_id and a.bacct_num = e.bacct_num \n        left join\
      \ `{whsia_eligible_base}` f on a.LPDS_ID = f.LPDSId\n        left join `bi-srv-hsmdet-pr-7b9def.hsmdet_public.bq_pub_fda_alarm_full_universe`\
      \ g1\n            on a.cust_id is not null and a.cust_id = g1.cust_id\n    \
      \    left join `bi-srv-hsmdet-pr-7b9def.hsmdet_public.bq_pub_fda_alarm_full_universe`\
      \ g2\n            on a.bacct_num is not null and a.bacct_num = g2.bacct_num\n\
      \        left join `bi-srv-hsmdet-pr-7b9def.hsmdet_public.bq_pub_fda_alarm_full_universe`\
      \ g3\n            on a.FMS_ADDRESS_ID is not null and a.FMS_ADDRESS_ID = g3.FMS_ADDRESS_ID\n\
      \        left join `{shs_professional_install}` h on substr(a.SERV_POSTAL_CODE,\
      \ 1, 3) = h.FSA\n        left join custid_gaming j on a.cust_id = j.cust_id\
      \ and cast(a.lpds_id as int64) = cast(j.lpds_id as int64)\n        left join\
      \ pending_orders k on k.cust_id = cast(a.cust_id as STRING)\n            and\
      \ k.LPDS_ID = cast(a.LPDS_ID as STRING) \n        left join spd m on a.LPDS_ID\
      \ = m.LPDS_Id\n        where a.cust_id > 0\n        ;\n\n    INSERT INTO `{qua_base}_temp`\n\
      \n    WITH dummy_cte AS (\n        select 1 as dummy_col\n    )\n\n    \"\"\"\
      \ \n\n    # Create eligible base for each offer\n    sql_all = sq0l\n    n_offer\
      \ = offer_info.shape[0]\n    for ii in range(n_offer):\n        ii2 = ii + 1\n\
      \n        sql_b1 = (\n                f\"\"\", {offer_info['Offer_Number2'][ii]}\
      \ as (\n                select distinct safe_cast(cust_id as int64) as cust_id\
      \ \\n\n                , safe_cast(bacct_num as int64) as bacct_num \\n\n  \
      \              , safe_cast(lpds_id as int64) as lpds_id \\n\n              \
      \  , ACCT_START_DT as candate \\n\n                , '{offer_info['Category'][ii]}'\
      \ as Category  \\n\n                , '{offer_info['Subcategory'][ii]}' as Subcategory\
      \  \\n \n                , '' as digital_category\n                , '{offer_info['promo_seg'][ii]}'\
      \ as promo_seg  \\n \n                , '{offer_info['NCID'][ii]}' as offer_code\
      \  \\n \n                , cast('{offer_info['valid_start_dt'][ii]}' AS DATE)\
      \ as ASSMT_VALID_START_TS  \\n\n                , cast('{offer_info['valid_end_dt'][ii]}'\
      \ AS DATE) as ASSMT_VALID_END_TS  \\n \n                , {str(offer_info['rk'][ii])}\
      \ as rk  \\n\n                from ffh_bas \\n where  {offer_info['HS_filters'][ii]}\
      \ )  \\n \"\"\"\n               )\n\n        sql_all0 = sql_all + sql_b1\n\n\
      \        sql_all = sql_all0\n\n    # Union eligible bases\n    sql_all0 = sql_all\
      \ + f\" select * from {offer_info['Offer_Number2'][0]} \\n\"\n    sql_all =\
      \ sql_all0\n    n_offer = offer_info.shape[0] - 1\n    for ii in range(n_offer):\n\
      \        ii2 = ii + 1\n        sql_b2 = f\" union all select * from {offer_info['Offer_Number2'][ii2]}\
      \  \\n\"\n        sql_all0 = sql_all + sql_b2\n        sql_all = sql_all0\n\n\
      \n    # check base count before creating multiple eligible base\n    sq0l =\"\
      \"\"\n\n        select\n            count(distinct bacct_num) as cnt\n     \
      \   from `bi-srv-hsmdet-pr-7b9def.campaign_data.bq_dly_dbm_customer_profl`\n\
      \n    \"\"\" \n\n    df_check = client.query(sq0l).to_dataframe()\n\n    # creating\
      \ eligible base\n    start_time = time.time()\n\n    if df_check['cnt'][0] >\
      \ 2_500_000:\n        cr8bqt_sql_BI(\n            clnt = client,\n         \
      \   sql_base = sql_all,\n            opt = qua_base,\n            est_num =\
      \ 10_000_000\n        )\n\n    else:\n        raise Exception(f\"FFH base has\
      \ {df_check['cnt'][0]} rows -- seems low. Update aborted.\")\n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - reg_offers_base_existing
