name: Output validation
inputs:
- {name: project_id, type: String}
- {name: dataset_id, type: String}
- {name: query, type: String}
- {name: token, type: String}
implementation:
  container:
    image: northamerica-northeast1-docker.pkg.dev/cio-workbench-image-np-0ddefe/bi-platform/bi-aaaie/images/kfp-pycaret-slim:latest
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.18' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - |2+

      import kfp
      from kfp.v2 import dsl
      from kfp.v2.dsl import *
      from typing import *

      def output_validation(project_id: str
             , dataset_id: str
             , query: str
             , token: str
            ):

          print('1')
          from google.cloud import bigquery
          import logging
          from datetime import datetime

           #### For wb
          import google.oauth2.credentials
          CREDENTIALS = google.oauth2.credentials.Credentials(token)

          client = bigquery.Client(project=project_id, credentials=CREDENTIALS)
          job_config = bigquery.QueryJobConfig()

          #### For prod
          #    client = bigquery.Client(project=project_id)
          #    job_config = bigquery.QueryJobConfig()

          df = client.query(query, job_config=job_config).to_dataframe()

          if df.shape[0] < 1:
              validation = 'pass'
          else:
              validation = 'fail'

          print(validation)

          logging.info(df.to_string())

      #     logging.info(f"Loaded {df.total_rows[0]} rows into \
      #              {df.table_catalog[0]}.{df.table_schema[0]}.{df.table_name[0]} on \
      #              {datetime.strftime((df.last_modified_time[0]), '%Y-%m-%d %H:%M:%S')} !")

          return validation

    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - output_validation
