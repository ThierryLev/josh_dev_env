name: Visualize stats
description: 'Inputs:'
inputs:
- {name: statistics, type: Artifact}
- {name: op_type, type: String, default: '', optional: true}
- {name: stats_nm, type: String, default: '', optional: true}
- {name: base_stats_path, type: String, optional: true}
- {name: base_stats_nm, type: String, default: '', optional: true}
outputs:
- {name: view, type: HTML}
implementation:
  container:
    image: northamerica-northeast1-docker.pkg.dev/cio-workbench-image-np-0ddefe/bi-platform/bi-aaaie/images/kfp-tfdv-slim:1.0.0
    command:
    - sh
    - -c
    - |2

      if ! [ -x "$(command -v pip)" ]; then
          python3 -m ensurepip || python3 -m ensurepip --user || apt-get install python3-pip
      fi

      PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet     --no-warn-script-location 'kfp==1.8.18' && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp -d)
      printf "%s" "$0" > "$program_path/ephemeral_component.py"
      python3 -m kfp.v2.components.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"
    - "\nimport kfp\nfrom kfp.v2 import dsl\nfrom kfp.v2.dsl import *\nfrom typing\
      \ import *\n\ndef visualize_stats(\n    statistics: Input[Artifact], \n    view:\
      \ Output[HTML], \n    op_type: str = '', \n    stats_nm: str = '', \n    base_stats_path:\
      \ str = None, \n    base_stats_nm: str = '' \n    ): \n\n    ''' \n    Inputs:\
      \ \n         - op_type: training or serving or predictions \n         - stats_nm:\
      \ name of new stats \n         - base_stats_path: path to base stats in gcs\
      \ (usually training set) \n         - base_stats_nm: base stats name \n    \
      \     - statistics: path to statistics imported from generate stats component\
      \ \n\n    Outputs: \n        - html artifact \n\n    ''' \n\n    import tensorflow_data_validation\
      \ as tfdv \n    from tensorflow_data_validation.utils.display_util import (get_statistics_html,\
      \ ) \n\n    # load stats \n    stats = tfdv.load_statistics(input_path=statistics.uri)\
      \ \n    print(\"statistics uri\") \n    print(statistics.uri) \n\n    # create\
      \ html content \n    if base_stats_path is not None: \n        base_stats =\
      \ tfdv.load_statistics(input_path=base_stats_path) \n\n        html=get_statistics_html(\n\
      \            lhs_statistics=stats, \n            lhs_name=stats_nm, \n     \
      \       rhs_statistics=base_stats, \n            rhs_name=base_stats_nm, \n\
      \            ) \n\n    else: \n        html=get_statistics_html(\n         \
      \   lhs_statistics=stats, \n            lhs_name=stats_nm, \n            ) \n\
      \n    # ensure view is stored as html (this will set content-type to text/html)\
      \ \n    if not view.path.endswith(\".html\"): \n        view.path += \".html\"\
      \ \n\n    print(\"view path\") \n    print(view.path) \n\n    # write html to\
      \ output file \n    with open(view.path, \"w\") as f: \n        f.write(html)\
      \ \n\n"
    args:
    - --executor_input
    - {executorInput: null}
    - --function_to_execute
    - visualize_stats
